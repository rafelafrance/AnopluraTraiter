[build-system]
requires = ["uv_build>=0.8.12"]
build-backend = "uv_build"

[project]
name = "AnopluraTraiter"
version = "0.1.0"
readme = "README.md"
description = "Rule-based parsers for mining scientific liturature about biting lice"
license = { file = "LICENSE" }
authors = [{ name = "Raphael LaFrance", email = "raphael.lafrance@gmail.com" }]
requires-python = ">=3.13"
dependencies = [
    "dspy>=3.0.1",
    "ftfy>=6.3.1",
    "jinja2>=3.1.6",
    "pandas>=2.3.1",
    "pip>=25.2",
    "regex>=2025.7.34",
    "spacy>=3.8.7",
    "tqdm>=4.67.1",
]

[tool.uv.build-backend]
module-root = "."
module-name = "anoplura"

[tool.uv]

[tool.ruff]
target-version = "py313"

show-fixes = true
exclude = [
    "**/external/**", # External code
]

[tool.ruff.lint]

select = ["ALL"]

ignore = [
    "A003",    # Class attribute is shadowing a Python builtin
    "COM812",  # Trailing comma missing
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in public method
    "D107",    # Missing docstring in public __init__
    "D203",    # 1 blank line required before class docstring
    "D212",    # Multi-line docstring summary should start at the first line
    "DTZ005",  # Pass a `datetime.timezone` object to the `tz` parameter
    "ERA001",  # Remove commented-out code
    "ISC001",  # Implicitly concatenated string literals on one line
    "LOG015",  # Use own logger instead
    "N818",    # Exception name {name} should be named with an Error suffix
    "PD901",   # Avoid using the generic variable name df for DataFrames
    "PLR0913", # Too many arguments in function definition ({c_args} > {max_args})
    "PLW2901", # Outer {outer_kind} variable {name} overwritten by inner {inner_kind} target
    "PLW0603", # Using the global statement to update {name} is discouraged
    "PT009",   # Use a regular "assert" instead of unittest-style {assertion}
    "RET504",  # Unnecessary assignment to {name} before return statement
    "RUF001",  # String contains ambiguous {}. Did you mean {}?
    "RUF003",  # Comment contains ambiguous character
    "SIM114",  # Combine if branches using logical or operator
    "SIM117",  # Use a single with statement with multiple contexts instead of nested with statements
    "SLF001",  # Private member accessed: {access}
    "T201",    # print found
]
